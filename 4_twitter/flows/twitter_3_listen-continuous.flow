# Project: adams
# Date: 2015-11-24 15:24:40
# User: fracpete
# Charset: UTF-8
#
adams.flow.control.Flow
	-actor
		adams.flow.standalone.TwitterConnection
	-actor
		adams.flow.standalone.CallableActors
			-actor
				adams.flow.source.SequenceSource
					-name
					filename
					-annotation
					Here the CSV filename is generated
					-actor
						adams.flow.source.Start
					-actor
						adams.flow.transformer.Timestamp
							-format
							\'${TMP}/tweets_\'yyyy-MM-dd\'.csv\'
			-actor
				adams.flow.sink.Display
					-name
					Progress
					-writer
						adams.data.io.output.NullWriter
	-actor
		adams.flow.standalone.HashSetInit
			-storage-name
			csvfiles
	-actor
		adams.flow.standalone.Events
			-actor
				adams.flow.standalone.Cron
					-annotation
					Checking every minute for new CSV files to gzip
					-cron-actor
						adams.flow.source.HashSet
							-storage-name
							csvfiles
					-cron-actor
						adams.flow.transformer.SpreadSheetVariableRowIterator
					-cron-actor
						adams.flow.control.Trigger
							-name
							gzip file
							-tee
								adams.flow.source.Variable
									-var-name
									Value
							-tee
								adams.flow.transformer.GZIP
									-remove
									true
									-output
									${TMP}
									-buffer
									102400
							-tee
								adams.flow.sink.CallableSink
									-callable
									Progress
					-cron-actor
						adams.flow.control.Trigger
							-name
							remove file from "to-zip" list
							-tee
								adams.flow.source.Variable
									-var-name
									Value
							-tee
								adams.flow.transformer.HashSetRemove
									-storage-name
									csvfiles
					-schedule
					0 * * * * ?
	-actor
		adams.flow.source.TwitterListener
			-max-updates
			0
	-actor
		adams.flow.control.TriggerOnce
			-name
			initial filename
			-tee
				adams.flow.source.CallableSource
					-callable
					filename
			-tee
				adams.flow.transformer.SetVariable
					-name
					initial filename
					-var-name
					filename
	-actor
		adams.flow.control.Count
			-tee
				adams.flow.sink.CallableSink
					-callable
					Progress
			-condition
				adams.flow.condition.bool.Counting
					-interval
					1000
	-actor
		adams.flow.control.ConditionalTrigger
			-tee
				adams.flow.source.CallableSource
					-callable
					filename
			-tee
				adams.flow.control.ConditionalTee
					-annotation
					New CSV file started?
					-tee
						adams.flow.transformer.SetVariable
							-name
							old filename
							-var-name
							filename_old
							-var-value
							@{filename}
					-tee
						adams.flow.transformer.SetVariable
							-name
							new filename
							-var-name
							filename
					-tee
						adams.flow.control.Trigger
							-name
							queue CSV file for gzipping
							-tee
								adams.flow.source.Variable
									-var-name
									filename_old
							-tee
								adams.flow.transformer.HashSetAdd
									-storage-name
									csvfiles
					-condition
						adams.flow.condition.bool.Expression
							-expression
							\"@{filename}\" != \"X\"
			-condition
				adams.flow.condition.bool.Counting
					-interval
					1000
	-actor
		adams.flow.transformer.TwitterConverter
			-converter
				adams.data.twitter.SpreadSheetConverter
					-field
					ID
					-field
					USER_ID
					-field
					USER_NAME
					-field
					SOURCE
					-field
					TEXT
					-field
					CREATED
					-field
					FAVORITED
					-field
					RETWEET
					-field
					RETWEET_COUNT
					-field
					RETWEET_BY_ME
					-field
					POSSIBLY_SENSITIVE
					-field
					GEO_LATITUDE
					-field
					GEO_LONGITUDE
					-field
					LANGUAGE_CODE
					-field
					PLACE
					-field
					PLACE_TYPE
					-field
					PLACE_URL
					-field
					STREET_ADDRESS
					-field
					COUNTRY
					-field
					COUNTRY_CODE
					-field
					IN_REPLY_TO_STATUS_ID
					-field
					IN_REPLY_TO_USER_ID
					-field
					RETWEETED_STATUS_ID
					-field
					RETWEETED_STATUS_USER_ID
					-field
					RETWEETED_STATUS_CREATED
					-field
					EXPANDED_URLS
					-data-row-type
						adams.data.spreadsheet.DenseDataRow
					-spreadsheet-type
						adams.data.spreadsheet.SpreadSheet
	-actor
		adams.flow.sink.SpreadSheetFileWriter
			-output
			@{filename}
			-writer
				adams.data.io.output.CsvSpreadSheetWriter
					-appending
					true
	-error-handling
	ACTORS_DECIDE_TO_STOP_ON_ERROR
	-flow-execution-listener
		adams.flow.execution.NullListener

