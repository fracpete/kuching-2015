# Project: adams
# Date: 2015-11-24 10:53:14
# User: fracpete
# Charset: UTF-8
#
adams.flow.control.Flow
	-annotation
	Simple flow with a Jython script that just adds\na user-supplied integer value to the (integer) tokens\nbeing passed through.\nNB: If you experience problems executing the flow,\nsee src/main/resources/documentation/Troubleshooting.txt
	-actor
		adams.flow.source.ForLoop
	-actor
		adams.flow.transformer.Jython
			-options
			add=10
			-inline-script
			import adams.core.Utils as Utils\nimport adams.flow.core.Token as Token\nimport adams.flow.core.Unknown as Unknown\nimport adams.flow.transformer.AbstractScript as AbstractScript\n\nimport java.lang.Class as Class\n\nclass SimpleTransformer(AbstractScript):\n    \"\"\"\n    A simple Jython transformer that just adds a user-supplied integer to the\n    integers that pass through.\n\n    Expects an additional option called \"add\" with the number to add.\n\n    @author FracPete (fracpete at waikato dot ac dot nz)\n    @version $Revision: 2111 $\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the transformer.\n        \"\"\"\n\n        AbstractScript.__init__(self)\n\n    def globalInfo(self):\n        \"\"\"\n        Returns a string describing the object.\n\n        @return: a description suitable for displaying in the gui\n        \"\"\"\n\n        return \"Just adds a user-supplied integer to the integers passing through.\"\n\n    def accepts(self):\n        \"\"\"\n        Returns the class of objects that it accepts.\n\n        @return: Integer.class\n        @rtype: list\n        \"\"\"\n\n        # very in-elegant, but works\n        # http://www.prasannatech.net/2009/02/class-object-name-java-interface-jython.html\n        return [Class.forName(\"java.lang.Integer\")]\n\n    def generates(self):\n        \"\"\"\n        Returns the class of objects that it generates.\n\n        @return: Integer.class\n        @rtype: list\n        \"\"\"\n\n        # very in-elegant, but works\n        # http://www.prasannatech.net/2009/02/class-object-name-java-interface-jython.html\n        return [Class.forName(\"java.lang.Integer\")]\n\n    def doExecute(self):\n        \"\"\"\n        Executes the flow item.\n\n        @return: None if everything is fine, otherwise error message\n        @rtype: str\n        \"\"\"\n\n        input = self.m_InputToken.getPayload()\n        self.m_OutputToken = Token(input + self.getAdditionalOptions().getInteger(\"add\", 1))\n        return None\n\n
	-actor
		adams.flow.sink.Display
			-writer
				adams.data.io.output.NullWriter
	-flow-execution-listener
		adams.flow.execution.NullListener

